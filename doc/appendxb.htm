<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR"
content="Microsoft FrontPage (Visual InterDev Edition) 2.0">
<title>Appendix B: References</title>
</head>

<body bgcolor="#FFFFFF" link="#487B59" vlink="#67B467"
alink="#804040">

<h1><font size="5" face="Arial">APPENDIX B: REFERENCES</font></h1>

<p>This appendix provides a list of publications related to the
Code Farms libraries. Reprints of the papers are available from
Code Farms for a nominal charge covering printing and postage.</p>

<p>[1] Weiss R.: <em>Software Manages C Data Structures</em>,
Electronic ­Engineering Times, Feb.5, 1990, pp.39-45.</p>

<p>Early, popular article explaining the advantages of our
approach.</p>

<p>[2] Soukup J.: <em>Organized C: A Unified Method of Handling
Data in CAD Algorithms and Databases</em>, 27-th ACM/IEEE Design
Automation Conference, 1990, pp.425-430.</p>

<p>Describes the main idea, using three examples: netlist for
electrical circuits, classical ER example, and a database for a
VLSI layout system. All code examples are in C. This paper was
written at the time when the C++ version of the library was not
developed to its current advanced level.</p>

<p>[3] Soukup J.: <em>Selecting a C++ Library</em>, C++ Report,
Jan.1992</p>

<p>This article does not describe our library, but it lists
features and priorities that we considered important in our
design. It also contains a description of a benchmark suitable
for a quick evaluation of a class library.</p>

<p>[4] Soukup J.: <em>Memory Resident Databases</em>, C++ Report,
Feb.1992</p>

<p>Describes how persistent data, such as that provided by our
library, can be used for fast, flexible databases.</p>

<p>[5] Soukup J.: <em>Beyond Templates</em>, C++ Report, two
parts (April and May 1992)</p>

<p>This is a detailed, theoretical analysis with numerous C++
examples.</p>

<p>It explains the advantages of our approach compared to
classical C++ libraries and templates, in both run-time
performance, code clarity and ease of maintenance.</p>

<p>[6] Galbiati L.: <em>Comparing Different Implementations of a
VLSI Simulation Database</em>, submitted to fall ICCAD 92</p>

<p>A user report on evaluation and benchmarks of Code Farms C
library, with comparisons to commercial object-oriented databases
and a custom-designed database. The performance of the program
coded with our library was comparable to the custom-designed
database; it needed 5 times less memory and had 20-times faster
data access than a leading commercial database.</p>

<p>[7] Hutchings B.L.: <em>Achieving CAD Data Persistence With
C++</em>,submitted to 1992 OOPSLA Conference</p>

<p>A user report on a difficult case of a large database (250+
classes), which was originally designed without storage to disk.
The author selected Code Farms' library to add persistency to the
database, and the paper describes his approach and experience.</p>

<p>[8] Soukup J.: <em>Maze Router Without A Grid Map</em>,
submitted to the fall ICCAD 1992</p>

<p>Decription of a special algorithm finding routes through a
maze of complex obstacles. The paper includes a full listing of
the program coded with the C version of our library.</p>

<p>[9] Soukup J.: <em>The Secret Of Efficient Software Design:
Internal Data Organization</em>, Electro Convention, Boston, May
12-14, 1992</p>

<p>Describes the advantage of separating data objects from data
relations, and how easily this is done with the Code Farms
library.</p>

<p>The paper evolves around a sample problem involving towns
connected by highways. The task is to find the fastest route
between two given towns. The paper includes a full C++ listing of
the program.</p>

<p>[10] Soukup J.: <em>Taming C++: Pattern Classes and
Persistence for Large Projects</em>, Addison-Wesley, July 1994,
ISBN 0-201-52826-6.</p>

<p>The book describes a new approach to the implementation of
data structure libraries, and patterns in general. Also, various
forms of persistent data are discussed in detail.</p>

<p>[11] Soukup J.: <em>Implementing Patterns, in Pattern
Languages of Program Design</em> (edited by Complien &amp;
Schmidt), Addison-Wesley 1995, pp.395-415, ISBN 0-201-60734-4.</p>

<p>This paper from the the first PLoP conference shows that
structural patterns can be implemented in the style which we use
in the OrgC++ library.</p>

<p>[12] Soukup J.: <em>Intrusive Data Structures</em> (3 part
article), C++ Report, May, July, Oct.1998</p>

<p>[13] Soukup J.: Quality Patterns, C++ Report, Oct.1996 also
Managing Groups of Cooperating Classes in the same issue.</p>

<p>[14] Vadaparty K.: <em>Memory Resident Databases</em> 1997.</p>

<p>&nbsp;</p>

<table border="0" cellpadding="2" width="100%">
    <tr>
        <td width="50%"><a href="AppendxA.htm"><font face="Arial"><img
        src="images/prev.gif" border="0" width="21" height="19">Appendix
        A: Current Organizations</font></a></td>
        <td align="right" width="50%"><a href="ch01intr.htm"><font
        face="Arial">Chapter 1: Introduction <img
        src="images/next.gif" border="0" width="21" height="19"></font></a></td>
    </tr>
</table>
</body>
</html>
