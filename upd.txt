
Apr.25/97: Version 4.62
-------------------------------------------------------------

(1) The library was ported to LINUX with GNU, using C++.
(2) Function which converts error message code into error message number
    was added - search for SPECIAL_OPTION in file lib/msgs.c.

Jun.5/97: Version 4.7
-------------------------------------------------------------

(3) Objects within each bucket of the HASH table are no sorted, which
    permits to use the hash table for a fast index access (assuming
    the .._hash() function pre-sorts the buckets).
(4) Note that HASH::add() does not add an object if the same key already
    exists in the table. No error message is generated, the object is 
    left disconnected. This is how it always has been in our library, but
    this important fact was not sufficiently emphasized in the documentation.

Jun.26/97: Version 4.8
-------------------------------------------------------------

A major bug was fixed, which caused problems when saving special
configuration of objects in the BINARY mode.
It happened in the case when a base class had properties or arrays
attached to it. For example:

    class A {
        ZZ_EXT_A
    };
    class B : public A {
        ZZ_EXT_B
    };
    ZZ_HYPER_PROPERTY(A);

Dec.16/97: Version 4.9
-------------------------------------------------------------

Local organizations declared by ZZ_LOCAL_.. instead of ZZ_HYPER_..
did not compile under some compilers. This has been corrected
by small changes in zzprep.c, zzintern.h, and macro/zzmaster.
Note that when an organization is declared in the local scope,
the ZZ_LOCAL_.. statement must be before(!) the ZZ_EXT_.. statement.

    class A {
        ZZ_EXT_A
       ...
    };
    class B {
        ZZ_LOCAL_HASH(myHash,B,A,B);
        ...
        ZZ_EXT_B
        ...
    };
    // For a running example, see test/test36b.c

New files in Ver.4.9: zzprep.c, zzintern.h, zzmaster, info, test36*.c

Feb.18/98: Version 5.0
-------------------------------------------------------------
(1) Function newFun() allows you to switch between two or more different
    hashing functions while running your program.

(2) The ARRAY organization can be treated as a sorted collection,
    maintaing the order while inserting or deleting items with functions
    addOrd() and delOrd(). Also, new function get() performs a fast search
    using binary search, and returns the index of the item with the given key.

(3) The error in sort() for ARRAY which caused problems with compilation
    for arrays of pointers has been corrected. For example:
    class A;
    class B;
    ZZ_HYPER_ARRAY(myArr,A,B*); // gave compile errors in func.c
(4) hyppage is new, multiple calls to pager.close() are now permitted
    without a crash.
(5) del() for hash prints error messages if the function cannot find the
    object. (delhash, msgs.c)
    
New files in Ver.5.0: zzintern.h, hyparray, hyphash, hyppage, test52.c, out52

Improvements in Ver.5.1:
------------------------
(1) zzincl.h used to generate warnings in the ZZinhList
    section. zzprep.c has been modified to generate better zzincl.h.
(2) The order of constructors for (ZZZiClass) in zzfunc.c used to generate
    warnings under LINUX - zzprep.c has been modified to remove them.
                                                          Jiri, Dec.16/98

Improvements in Ver.5.4:
------------------------
(1) In previous version, under some conditions, util.save() crashed when
    the REFERENCE organization was used. This problem has been corrected.
                                                          Jiri, Nov.16/00
   
Improvements in Ver.5.4.1:
------------------------
(1) No changes in the source, small changes in the batch/script/include
    files to overcome NT problem with the 'copy' command, which does not
    copy the newLine character at the end of the file.
(2) Added test58 to orgc/test. It demonstrates splitting the source
    to *.h and *.cpp files for individual classes, as usual today.
(3) Significant improvement of the documentation part describing save/open
    commands (Chap.13).
                                                           Jiri, Jan.17/01

Improvements in Ver.5.6:
------------------------
(1) Several improvements for running multiple versions of DOL under the same
    project (see ZZlocal, subprojects). When several independent DOL
    applications are used on the same project, only one of them (the 'main'
    application) can save/restore data from disk now. 
(2) ARRAY and HASH work now safely in this setup (Ver.5.5 had problems
    for arrays of derived classes). 
                                                           Jiri, Sept.20/01

Improvements in Ver.5.7:
------------------------
(1) The new native Sun compiler (Ver.5.0), not g++, required numerous minor
    syntax fixes for the library to compile. There are many warnings:
         String literal converted to char* ....
(2) The library is now available in C++ only, the C version is not supported
    any more.
(3) The clarity of readme files was significantly imnproved, the compile
    and regression scripts simplified and improved.
(4) The Borland compiler was thoroughly tested again, and the new batch
    files provided by Curtis Krauskopf are included in all directories
    - look for files names BCB4...
                                                           Jiri, Feb.25/02

Improvements in Ver.5.8:
------------------------
(1) Cleanup of the test directory - numerous obsolete script files have
    been removed.
(2)*The ARRAY organization (regardless of what objects are in the array)
    has now access to individual bits through functions getBit() and setBit().
    Note that other libraries need a special class for this (BinaryArray).
(3)*Functions clear() and clearAndDestroy() have been added to most
    organizations. Note that clear() disassembles the organization,
    while clearAndDestroy() disassembles it and destroys only those objects
    which have been disconnected from all(!) organizations. DOL has 
    a special checking mechanism for this, which cannot be used in libraries
    which are not based on intrusive data structures.
(4) It has been verified, that by changing ZZlocal to ZZmain in file
    lib/pager.hpp and recompiling the library, it is possible to use DOL
    with multiple, independent projects - each using ZZlocal only.

                                                           Jiri, Sep.04/02
Improvements in Ver.5.8.1
--------------------------
(1) Additional error message in hash::del() protecting against deleting
    objects which are not in any hash table.

Improvements in Ver.5.9
--------------------------
(1) Simple introductory examples of the three methods of
saving/retrieving data from disk were added to orgc\test directory,
read orgc\test\readme.txt for the instruction.
                                                           Jiri, May.05/04
Improvements in Ver.5.91
--------------------------
(1) Names of all source and batch files changed to lower case in order
to make this source to compile and run under both Windows and UNIX/Linux.
                                                           Jiri, July 18/04

Improvements in Ver.6.0 
--------------------------
(1) Memory leak in sweap.c - function newArr(), the SPLIT option on PC
    has been corrected.
(2) Added ZZinheritAll as an option for users who do not want to worry
    about all base classes required to have at least one virtual function
    (as required when only ZZ_INHERIT is used).
(3) A significant improvement in the size of disk file for memory blasting.
    Previous versions stores a large internal array filled mostly with 0's.
    The array is now stored more efficiently. Depending on the chosen
    parameters and size of the problem, this improvement may decrease
    the disk storage from 137kB to 440B !!
(4) Functions util.clear() can now be safely used for all three modes
    of saving to disk (it was disabled for ASCII and binary modes in
    previous versions).
(5) New function util.getNumObjects() returns the number of application
    objects currently in use. (The count does not include arrays of objects.)
(6) In the User Guide, the entire chapter 13 (memory allocation and saving
    to disk) has been revised.

Improvements in Ver.7.0 
--------------------------
(1) Every run of zzprep generates the UML diagram of the program data 
    structure. (It actually generates file layout.inp, which is the
    input for program 'layout', see test/ss.bat).
    ss.bat creates file layout.svg, which can be displayed by any Internet
    browser.
(2) The library was ported to Microsoft VC++ Ver.7 (.NET).
    The porting needed no changes in the library itself, only the tests
    for the C language were removed from the regression test test/msftregr.bat.
(3) The library was ported to U++, graphical environment using g++ under
    MS Windows. This is a strange environment which is just in the middle
    between the defines for UNIX/Linux and those for Microsoft VC++.
    A new #define UPP was introduced, there is also a new environment file
    envupp.h, upp.bat replaces msft.bat, uppregr.bat replaces msftregr.bat,
    etc. In the g++ (and UNIX) tradition the library is called *.a.

Improvements in Ver.7.1  (November 10, 2006)
--------------------------
(1) An problem that the presence of HYPER_REFERENCE crashed util.save() 
    have been corrected. This is the first serious bug in about 5 years.


Version 8.0 (October 15, 2011)
-------------------------------------------------------------
Microsoft Visual Studio C++ 2010 introduced terrible thing:
Pointer size increased to 64 bits, but long remains 32 bits !!
This required many changes all through DOL. Variable LONG is long,
except for VS 64 bites where is is (long long).
Note #define Windows64 which as to be in the environmental file,
envmsft.h which then is copied to environ.h.

Version 9.2 (Oct.19, 2012)
--------------------------------------------------------------
The ASCII mode had a 512B limit on the size of text strings (NAME),
but no limits under other modes. Now there is no limit even in ASCII mode.
