// Demonstration of saving data to disk - far the fastest method
// called "memory blasting". Entire pages of memory are allocated and
// saved or retrieved from disk without fragmentation to individual objects.
// A smart algorithm swizzles pointers in several machine instructions.
// No serialization functions are used (not even internally), the use
// is the same as for other methods, except that that you have to declare
// this mode and the size of one page in bits.
//
// Changes: use of util.mode() and util.blkAlloc()
// --------------------------------------------------------------------------
#define ZZmain // use exactly in one file of your program
#include "zzincl.h" // generated by zzprep
#include "testc.h"
int main(){
    int i=10345; Library *lib; Author *aut; Book *bk; 
    void* v[1]; char* t[1]; // for saving to disk

    util.mode(0,0,0,0);  // 0=memory blasting
    util.blkAlloc(0,10); // no limit on memory use, one page 1024 bytes(10 bits)

    lib=new Library;

    aut=new Author("Booch"); authors.add(lib,aut);
    bk=new Book(i); books.add(aut,bk); i++;
    bk=new Book(i); books.add(aut,bk); i++;
    
    aut=new Author("Stroustrup"); authors.add(lib,aut);
    bk=new Book(i); books.add(aut,bk); i++;
    
    // save data to disk, 'lib' is the root of all the data
    v[0]=lib; t[0]="Library";
    util.save("myFile",1,v,t); // 1 root, type=Library
    if(util.error()) printf("error in saving to file 'myFile'\n");
    return 0;
}
