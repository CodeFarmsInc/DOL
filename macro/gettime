/* =========================================================
.(l
 strType *ptr;   /* object to be stamped with the time stamp */
 char *time;             /* returned time stamp */
.)l
Description:
 The macro returns a 6 byte time stamp of the given object,
with the accuracy of 1 sec.
.pp
Objects allocated with ZZ.. macros and which have the timeStamp
organization, have the timeStamp automatically set at the time of allocation.
For automatically allocated objects,
you must use one of the ZZ.. initialization routines, which
also sets the timeStamp automatically.
.pp
If you want to reset the timeStamp, use ZZ_SET_TIME_STAMP().
To compare two time stamps, use ZZ_CMP_TIME_STAMP().
.sp
The purpose of this macro is to allow time/version control
in such complicated tasks as in the hierarchical design of VLSI
chips. For example, when a subblock of a design has a later time
stamp than its parent block, the the parent block must
be updated.
.(l
Example:

typedef struct Block Block;
struct Block {
    ZZ_EXT_Block
    char *name;
    int x1,y1,x2,y2;
};
ZZ_ORG_TIME_STAMP(Block)

Block *bp1,*bp2;
unsigned char ts[6];
int i;

.... allocate blocks bp1, bp2; use them in your program ....

/* print the older block */
ZZ_CMP_TIME_STAMP(bp1,bp1,i)
if(i<0)     printf("%s is older\n",bp1->name);
else if(i>0)printf("%s is older\n",bp2->name);
else        printf("both blocks have the same stamp\n");

/* print the timeStamp of bp2 */
ZZ_GET_TIME_STAMP(bp2,ts)
for(i=0;i<6;i++)printf("%d ",ts[i]);

.... may print: 88 9 13 15 32 55
     for Sept.13, 1988 3pm 32 min 55 sec
.)l
.sp 1
  ========================================================== */ 

#define ZZ_GET_TIME_STAMP(ptr,time) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\
{void ZZFUN_gtTime(); ZZgtTime((ptr)->ZZtimeStamp,time); }
