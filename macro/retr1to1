/* =========================================================
.(l
 TEXT id;       /* id of the organization */
 strType *targ;  /* given target entity */
 strType *rel; /* forward relation to be returned */
.)l
Description:
 For a given target entity, traverse all relations of the 1_TO_1 entity.
This macro is the beginning of a loop that must end with ZZ_A_END.
Since this is 1_TO_1 entity, the loop is either executed once, or not
executed at all (if no relation is recorded).
.sp
Relations can be deleted while traversing them using ZZ_A_RETRACE().
.sp
Advice: Use generic ZZ_A_RETRACE(), it makes the code simpler.
In most cases, ZZ_BACKWARD() is better for this relation than ZZ_A_RETRACE().
.(l
Example of the use:
   typedef struct Student Student;
   typedef struct Thesis Thesis;
   typedef struct WorkingOn WorkingOn;
   struct Student {
       ZZ_EXT_Student
       char *name;
   };
   struct Thesis {
       ZZ_EXT_Thesis
       char *title;
       int numPages;
   };
   struct WorkingOn {
       ZZ_EXT_WorkingOn
   };
   ZZ_ORG_1_TO_1(workingOnThesis,Student,WorkingOn,Thesis)
   ...
   Student *s;
   Thesis *t;
   WorkingOn *w;
   ...
   ZZ_A_RETRACE(workingOnThesis,t,w)
       ZZ_SOURCE(workingOnThesis,w,s);
       printf("thesis=%s belongs to student=%s\n",s->name,t->title);
   ZZ_A_END
.)l
  ========================================================== */ 
#define ZZ_A_RETRACE_1_TO_1(id,targ,rel) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\
ZZZ_RETRACE_1_TO_1(ZZFP(ZZb,id),targ,rel)

#define ZZZ_RETRACE_1_TO_1(nxt,targ,rel) \
{   if(targ)(rel)=(targ)->nxt; else (rel)=NULL;\
    for(;(rel);(rel)=NULL){
