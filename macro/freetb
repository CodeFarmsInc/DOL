/* =========================================================
.(l
 NO PARAMETERS
.)l
Description:
 This command frees the internal tables that can be used for customized
conversion of pointers.
.sp
Normally, ZZ_OPEN() removes the pointers automatically. Only when
ZZ_KEEP_TABLES() has been called - which should be a rather special
case of advanced data processing - the tables remain in memory
for the customized conversion through command ZZ_BIND_POINTER().
.sp
In the following example, we want to keep a pointer to one particular
Employee, and reset it to the new location, after ZZ_OPEN() reloads the whole
data:
.(l  
typedef struct Employee Employee;
struct Employee {
    ZZ_EXT_Employee
    int salary;
};
ZZ_ORG_NAME(eName,Employee);
ZZ_ORG_DOUBLE_RING(dRing,Employee);
  ...
Employee *ep
  ...
ep=...;         /* remember old pointer */
ZZ_SAVE(...);   /* save data on disk */
ZZ_KEEP_TABLES(); /* instruction to keep tables */
ZZ_OPEN(...);     /* reloads data into a new location */
ZZ_BIND_POINTER(ep,ep); /* resets pointer to the original object */
ZZ_CLOSE_TABLES(); /* removes tables from memory */
  ...
.)l
.sp
See also ZZ_KEEP_TABLES(), ZZ_BIND_POINTER(), and ZZ_OPEN().
.sp
  ========================================================== */ 
#define ZZ_FREE_TABLES() \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\
{void ZZFUN_afterOpen(); ZZafterOpen();}
