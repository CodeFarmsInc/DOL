/* =========================================================
.(l
 TEXT id;               /* id for the instance of the organization */
 str2Type *pp;   /* given pointer to a parent */
 str1Type *chi;  /* returned pointer to the child */
.)l
Description:
 For a given pointer to the top element of the triangle, find
the child that would be listed as first by ZZ_A_TRAVERSE().
 For the description of the 'triangle' structure, see also
ZZ_ADD_SINGLE_TRIANGLE().
 Generic ZZ_CHILD() can be used.
.(l
Example:

typedef struct Country Country;
typedef struct Town Town;
struct Country{
    ZZ_EXT_Country
    int population;
    float sqMiles;
    char *name;
};
struct Town{
    ZZ_EXT_Town
    char river; /* yes or no */
    char color; /* color people hate most */
    char *contryName;
    char *townName;
};
ZZ_ORG_SINGLE_TRIANGLE(myTriangle,Country,Town);

Country *c;
Town *t;

/* let us assume that towns have been organized into triangles,
 * all towns under its country name. For a given town 't'
 * to find its country 'c', we do:

    ZZ_CHILD(myTriangle,c,t);
.)l
.sp 1
  ========================================================== */ 
#define ZZ_CHILD_SINGLE_TRIANGLE(id,pp,chi) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\
ZZZ_CHILD_SINGLE_TRIANGLE(ZZFP(ZZc,id),ZZFP(ZZs,id),pp,chi)

#define ZZZ_CHILD_SINGLE_TRIANGLE(child,sibling,pp,chi) \
{if((pp)->child)(chi)=(pp)->child->sibling; else (chi)=NULL;}
