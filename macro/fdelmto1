/* =========================================================
.(l
 TEXT id;          /* organization id */
 strType2 *rel;    /* relation to be deleted */
.)l
Description:
 Delete the given M_TO_1 relation.
Exactly like ZZ_DELETE_RELATION_M_TO_1() but implemented as a compiled function.
.sp 1
  ========================================================== */ 
#ifndef ZZ_ANSI
#define ZZF_DELETE_RELATION_M_TO_1(id,rel) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */ 
{void ZZFP(ZZF_DELETE_RELATION_M_TO_1,id)();\
     ZZFP(ZZF_DELETE_RELATION_M_TO_1,id)(rel);}
#endif
#ifdef ZZ_ANSI
#define ZZF_DELETE_RELATION_M_TO_1(id,rel) \
{void ZZFP(ZZF_DELETE_RELATION_M_TO_1,id)(ZZFT(2,id) *r);\
     ZZFP(ZZF_DELETE_RELATION_M_TO_1,id)(rel);}
#endif

/* ____________________________________________________________ */
#ifdef ZZ_ANSI
void ZZF_DELETE_RELATION_M_TO_1$(ZZ2$ *rel)
#else
void ZZF_DELETE_RELATION_M_TO_1$(rel)
ZZ2$ *rel;
#endif
{
    if(rel){
	if(rel->ZZs$ && rel->ZZx$ && rel->ZZy$){
	    if(rel->ZZs$==rel)(rel->ZZy$->ZZb$)=NULL;
	    else {
	        if(rel==(rel->ZZy$->ZZb$))(rel->ZZy$->ZZb$)=rel->ZZr$;
	        rel->ZZr$->ZZs$=rel->ZZs$;
	        rel->ZZs$->ZZr$=rel->ZZr$;
	    }
	    rel->ZZs$=rel->ZZr$=rel->ZZx$->ZZf$=NULL;
            rel->ZZx$=NULL; rel->ZZy$=NULL;
	}
    }
}
