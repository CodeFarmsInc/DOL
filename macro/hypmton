/* =========================================================
.(l
 TEXT id;    // hyper-class id
 TEXT sType; // type of the source Entity
 TEXT rType; // type of the relation
 TEXT tType; // type of the target entity
.)l
Description:
 Declaration of the M_to_N relation between two Entity types. Source and
target entities can have the same type.
.pp
This organization uses 8 pointers: 1 on each entity, and 6 on the relation.
.pp
 void add(sType*,rType*,tType*) adds a new relation between two entities;
 void del(rType*) disconnects the given relation;
 sType *source(rType*) returns the source for the given relation;
 tType *source(rType*) returns the target for the given relation;
 rType *fwd(sType*) returns the last loaded relation for the given source;
 rType *bwd(tType*) returns the last loaded relation for the given target;
 rType *sIterator() iterates over relations connected to the source;
 rType *tIterator() iterates over relations connected to the target.
.pp
You can re-start the iterator by calling the iterator function start().
Both iterators can traverse in both directions (++ and --).
.pp
.(l
Example of the use:
   class Professor {
       ZZ_EXT_Professor
   public:
       char *name;
       Professor(){ZZ_INITIAL(Professor,0,1,this);}
       ~Professor(){ZZ_FREE_CHECK(Professor,1,this);}
   };
   class Student {
       ZZ_EXT_Student
   public:
       char *name;
       Student(){ZZ_INITIAL(Student,0,1,this);}
       ~Student(){ZZ_FREE_CHECK(Student,1,this);}
   };
   class Teaching {
       ZZ_EXT_Teaching
   public:
       int courseNum;
       Teaching(){ZZ_INITIAL(Teaching,0,1,this);}
       ~Teaching(){ZZ_FREE_CHECK(Teaching,1,this);}
   };
   ZZ_HYPER_M_TO_N(school,Professor,Teaching,Student);

   Professor *p;
   Teaching *t;
   Student *s;

   // print all professors who teach student s
   school_tIterator it(s);
   while(t=it++){
       p=school.source(t);
       cout << p->name << "course=" << t->courseNum << "\n";
   }

   // print in the reverse order
   it.start(s);
   while(t=it--){
       p=school.source(t);
       cout << p->name << "course=" << t->courseNum << "\n";
   }
.)l
  ========================================================== */ 
#define ZZ_HYPER_M_TO_N(id,sType,rType,tType) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */ \
ZZ_BASIC_M_TO_N(id,sType,rType,tType,ZZ_EXTERN,id)

#define ZZ_LOCAL_M_TO_N(id,sType,rType,tType,where) \
ZZ_BASIC_M_TO_N(id,sType,rType,tType,static,where :: id)

#define ZZ_BASIC_M_TO_N(id,sType,rType,tType,scope,where) \
class ZZFP(ZZH,id) { \
  friend class sType;\
  friend class rType;\
  friend class tType;\
public: \
  void add(sType *s,rType *r,tType *t);\
  void del(rType *r);\
  sType *source(rType *r){sType *s; ZZ_SOURCE_M_TO_N(id,r,s); return(s);}\
  tType *target(rType *r){tType *t; ZZ_TARGET_M_TO_N(id,r,t); return(t);}\
  rType *fwd(sType *s){rType *r; ZZ_FORWARD_M_TO_N(id,s,r); return(r);}\
  rType *bwd(tType *t){rType *r; ZZ_BACKWARD_M_TO_N(id,t,r); return(r);}\
  rType *nxtOnTarg(rType *r){rType *n;\
                        if(r)n=r->ZZFP(ZZs,id); else n=NULL; return(n);}\
  rType *preOnTarg(rType *r){rType *n;\
                        if(r)n=r->ZZFP(ZZw,id); else n=NULL; return(n);}\
  rType *nxtOnSour(rType *r){rType *n;\
                        if(r)n=r->ZZFP(ZZr,id); else n=NULL; return(n);}\
  rType *preOnSour(rType *r){rType *n;\
                        if(r)n=r->ZZFP(ZZv,id); else n=NULL; return(n);}\
};\
ZZ_EXTERN ZZFP(ZZH,id) id; \
class ZZFN(id,sIterator){ \
   rType *beg;\
   rType *nxt;\
public:\
   ZZFN(id,sIterator)(){beg=nxt=NULL;}\
   ZZFN(id,sIterator)(sType *s){start(s);}\
   void start(sType *s){nxt=NULL; if(s)beg=where.fwd(s); else beg=NULL;}\
   rType* operator++(){rType *p;\
      if(nxt)p=nxt; else if(beg)p=where.nxtOnSour(beg); else p=NULL;\
      if(p==beg)nxt=beg=NULL; else nxt=where.nxtOnSour(p); return(p);}\
   rType* operator--(){rType *p;\
      if(nxt)p=nxt; else if(beg){p=beg; beg=where.nxtOnSour(beg);} else p=NULL;\
      if(p==beg)nxt=beg=NULL; else nxt=where.preOnSour(p); return(p);}\
};\
class ZZFN(id,tIterator){ \
   rType *beg;\
   rType *nxt;\
public:\
   ZZFN(id,tIterator)(){beg=nxt=NULL;}\
   ZZFN(id,tIterator)(tType *t){start(t);}\
   void start(tType *t){nxt=NULL; if(t)beg=where.bwd(t); else beg=NULL;}\
   rType* operator++(){rType *p;\
      if(nxt)p=nxt; else if(beg)p=where.nxtOnTarg(beg); else p=NULL;\
      if(p==beg)nxt=beg=NULL; else nxt=where.nxtOnTarg(p); return(p);}\
   rType* operator--(){rType *p;\
      if(nxt)p=nxt; else if(beg){p=beg; beg=where.nxtOnTarg(beg);} else p=NULL;\
      if(p==beg)nxt=beg=NULL; else nxt=where.preOnTarg(p); return(p);}\
}
/* _______________________________________________________________________ */
void ZZV$ ZZH$ :: add(ZZ1$ *s,ZZ2$ *r,ZZ3$ *t){ZZ_ADD_RELATION_M_TO_N($,s,r,t);}
void ZZV$ ZZH$ :: del(ZZ2$ *r){ZZ_DELETE_RELATION_M_TO_N($,r);}
