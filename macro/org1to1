/* =========================================================
.(l
 TEXT id;               /* id for the instance of the organization */
 TEXT str1Type;         /* structure type of the source entity */
 TEXT str2Type;         /* structure type of the entity */
 TEXT str3Type;         /* structure type of the target entity */
.)l
Description:
 Declaration of the 1_to_1 relation between two object types. Source and
target entities can have the same type.
.pp
This organization uses 4 pointers: 1 on each entity, and 2 on the relation.
.pp
 ZZ_ADD_RELATION() adds a new relation between two entities;
 ZZ_DELETE_RELATION() deletes a given relation;
 ZZ_SOURCE() and ZZ_TARGET() move you from the relation to the source or
the target entity;
 ZZ_FORWARD() moves you from the source entity to the relation;
 ZZ_BACKWARD() moves you from target source entity to the relation.
 ZZ_A_TRAVERSE() and ZZ_A_RETRACE() can be used, their loop is executed 
0 or 1 times, and is equivalent to ZZ_FORWARD() and ZZ_BACKWARD().
.(l
Example of the use:
   typedef struct Student Student;
   typedef struct Thesis Thesis;
   typedef struct WorkingOn WorkingOn;
   struct Student {
       ZZ_EXT_Student
       char *name;
   };
   struct Thesis {
       ZZ_EXT_Thesis
       char *title;
       int numPages;
   };
   struct WorkingOn {
       ZZ_EXT_WorkingOn
   };
   ZZ_ORG_1_TO_1(workingOnThesis,Student,WorkingOn,Thesis)
.)l
  ========================================================== */ 
#define ZZ_ORG_1_TO_1(id,type1,type2,type3)
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */ \
/* ZZ_ORG_1_TO_1 */
