/* =========================================================
.(l
 TEXT id;       /* id of the organization */
 strType *targ;  /* given target entity */
 strType *rel; /* forward relation to be returned */
.)l
Description:
 For a given target entity, traverse all relations of the 1_TO_N entity.
This macro is the beginning of a loop that must end with ZZ_A_END.
Since this is 1_TO_N entity, the loop is either executed once, or not
executed at all (if no relation is recorded).
.sp
Relations can be deleted while traversing them using ZZ_A_RETRACE().
.sp
Advice: Use generic ZZ_A_RETRACE(), it makes the code simpler.
In most cases, ZZ_BACKWARD() is better for this relation than ZZ_A_RETRACE().
.(l
Example:
   typedef struct Class Class;
   typedef struct Student Student;
   typedef struct InClass InClass;
   struct Class {
       ZZ_EXT_Class
       int id;
   };
   struct Student {
       ZZ_EXT_Student
       char *name;
   };
   struct InClass {
       ZZ_EXT_InClass
   };
   ZZ_ORG_1_TO_N(students,Class,InClass,Student)
   ....
   Student *s;
   Class *c;
   InClass *i;
   ...
   ZZ_RETRACE(students,s,i)
       ZZ_SOURCE(students,i,c);
       printf("student=%s recorded in class=%d\n",s->name,c->id);
   ZZ_A_END
.)l
  ========================================================== */ 
#define ZZ_A_RETRACE_1_TO_N(id,targ,rel) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\
ZZZ_RETRACE_1_TO_N(ZZFP(ZZb,id),targ,rel)

#define ZZZ_RETRACE_1_TO_N(nxt,targ,rel) \
{   if(targ)(rel)=(targ)->nxt; else (rel)=NULL;\
    for(;(rel);(rel)=NULL){
