/* =========================================================
.(l
 TEXT id;          /* organization id */
 strType2 *rel;    /* relation to be deleted */
.)l
Description:
 Delete the given 1_TO_N relation.
.sp
If the relation is disconnected, no action is taken, no error message
issued.
.sp
The DELETE operation is permitted while in ZZ_A_RETRACE() loop.
.sp
Advice: Use generic ZZ_DELETE_RELATION(), it simplifies the code.
.sp
Warning: If this macro causes problems on Microsoft software, use
compiled version ZZF_DELETE_RELATION().
.(l
Example of the use:
   typedef struct Class Class;
   typedef struct Student Student;
   typedef struct InClass InClass;
   struct Class {
       ZZ_EXT_Class
       int id;
   };
   struct Student {
       ZZ_EXT_Student
       char *name;
   };
   struct InClass {
       ZZ_EXT_InClass
   };
   ZZ_ORG_1_TO_N(students,Class,InClass,Student)
   ....
   Student *s;
   Class *c;
   InClass *i;
   ...
   ZZ_PLAIN_ALLOC(InClass,1,i);
   ZZ_ADD_RELATION(students,c,i,s);
   ...
   ZZ_DELETE_RELATION(students,i);
.)l
.sp 1
  ========================================================== */ 
#define ZZ_DELETE_RELATION_1_TO_N(id,rel) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */ 
ZZZ_DELETE_RELATION_1_TO_N(id,ZZFP(ZZf,id),ZZFP(ZZx,id),ZZFP(ZZy,id), \
ZZFP(ZZb,id),ZZFP(ZZs,id),ZZFP(ZZr,id),rel)

#define ZZZ_DELETE_RELATION_1_TO_N(id,fwp,src,trg,bwp,sib,ret,rel)\
{\
    if(rel){\
	if((rel)->sib && (rel)->src && (rel)->trg){\
	    if((rel)->sib==(rel))((rel)->src->fwp)=NULL;\
	    else {\
	        if((rel)==((rel)->src->fwp))((rel)->src->fwp)=(rel)->ret;\
	        (rel)->ret->sib=(rel)->sib;\
	        (rel)->sib->ret=(rel)->ret;\
	    }\
	    (rel)->sib=(rel)->ret=(rel)->trg->bwp=NULL;\
            (rel)->src=NULL; (rel)->trg=NULL;\
	}\
    }\
}
