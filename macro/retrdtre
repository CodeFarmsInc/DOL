/* =========================================================
.(l
 TEXT id;               /* id for the instance of the organization */
 strType *par;   /* parent of this tree level */
 strType *pp;    /* returned child while traversing */
.)l
Description:
 Retrace one level of the tree. This is the same as TRAVERSE, except
that the objects are returned in the reversed order.
 Children that are being traversed may be deleted while retracing.
.sp
.(l
Example:
Print name and salary of all employees under a given manager.

typedef struct Employee Employee;
struct Employee {
    ZZ_EXT_Employee
    char *name;
    int salary;
    int startDate;
};
ZZ_ORG_DOUBLE_TREE(gTree,Employee)

Employee *pp,*manager;

ZZ_A_RETRACE_DOUBLE_TREE(Tree,manager,pp)
    printf("%s %d\n",pp->name,pp->salary);
ZZ_A_END
.)l
.sp 1
  ========================================================== */ 
#define ZZ_A_RETRACE_DOUBLE_TREE(id,par,pp) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\
ZZZ_A_RETRACE_DOUBLE_TREE(ZZFT(1,id),ZZFP(ZZb,id),ZZFP(ZZc,id),par,pp)

#define ZZZ_A_RETRACE_DOUBLE_TREE(strType,backward,child,par,pp) \
{strType *ZZt,*ZZc;\
if(par)ZZc=(par)->child; else ZZc=NULL;\
for((pp)=ZZc;pp;(pp)=ZZt){\
    if((pp)->backward==ZZc)ZZt=NULL; else ZZt=(pp)->backward;
