/* =========================================================
.(l
 TEXT id;               /* id for the instance of the organization */
 str1Type *par;   /* parent of this triangle */
 str2Type *pp;    /* returned child while traversing */
.)l
Description:
 Traverse the triangle under the given parent.
 Children that are being traversed may be deleted from the triangle
while traversing, if the proper function function is used (ZZ_DELETE()).
   After the last loop, pp is always set to NULL.
   When (par) has no children, the loop is by-passed.
.sp
.(l
Example:
Print name and salary of all employees in the given group.

typedef struct Employee Employee;
typedef struct SalaryGroup SalaryGroup;
struct Employee {
    ZZ_EXT_Employee
    char *name;
    int salary;
    int startDate;
};
struct SalaryGroup{
    ZZ_EXT_SalaryGroup
    int low,high;   
};
ZZ_ORG_SINGLE_TRIANGLE(gTrian,SalaryGroup,Employee);

Employee *pp;
SalaryGroup *group;

ZZ_A_TRAVERSE_SINGLE_TRIANGLE(gTrian,group,pp){
    printf("%s %d\n",pp->name,pp->salary);
}ZZ_A_END
.)l
.sp 1
  ========================================================== */ 
#define ZZ_A_TRAVERSE_SINGLE_TRIANGLE(id,par,pp) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\
ZZZ_A_TRAVERSE_SINGLE_TRIANGLE(ZZFT(2,id),ZZFP(ZZs,id),ZZFP(ZZc,id),par,pp)

#define ZZZ_A_TRAVERSE_SINGLE_TRIANGLE(strBot,sibling,child,par,pp) \
{strBot *ZZt,*ZZc;\
if(par)ZZc=(par)->child; else ZZc=NULL;\
if(ZZc)(pp)=ZZc->sibling; else (pp)=NULL;\
for(;pp;(pp)=ZZt){\
    if((pp)==ZZc)ZZt=NULL; else ZZt=(pp)->sibling;
