/* =========================================================
.(l
 TEXT id;       /* id of the organization */
 strType *targ; /* given target entity */
 strType *rel;  /* relations to be traversed */
.)l
Description:
 For a given target entity, traverse all relations of the M_TO_N entity.
This macro is the beginning of a loop that must end with ZZ_A_END.
Since this is M_TO_N entity, the loop is either executed M times, or not
executed at all (if no relation is recorded).
.sp
Relations can be deleted while traversing them using ZZ_A_RETRACE().
.sp
Advice: Use generic ZZ_A_RETRACE(), it makes the code simpler.
.(l
Example:
   typedef struct Teacher Teacher;
   typedef struct Student Student;
   typedef struct InCourse InCourse;
   struct Teacher {
       ZZ_EXT_Teacher
       char *name;
   };
   struct Student {
       ZZ_EXT_Student
       char *name;
   };
   struct InCourse {
       ZZ_EXT_InCourse
       int courseNum;
   };
   ZZ_ORG_M_TO_N(teacherStudent,Teacher,InCourse,Student)
   ....
   Teacher *t;
   Student *s;
   InCourse *i;
   ....
   printf("teachers of student=%s:\n",s->name);
   ZZ_A_RETRACE(teacherStudent,s,i)
       ZZ_SOURCE(teacherStudent,i,t);
       printf("teacher=%s course=%d\n",t->name,i->courseNum);
   ZZ_A_END
.)l
  ========================================================== */ 
#define ZZ_A_RETRACE_M_TO_N(id,targ,rel) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\
ZZZ_RETRACE_M_TO_N(ZZFP(ZZb,id),ZZFP(ZZs,id),ZZFT(2,id),targ,rel)

#define ZZZ_RETRACE_M_TO_N(nxt,sibl,strType,targ,rel) \
{strType *ZZt,*ZZs;\
    if(targ)ZZt=(targ)->nxt; else ZZt=NULL;\
    if(ZZt)(rel)=(ZZt)->sibl; else (rel)=NULL;\
    for(;(rel);(rel)=ZZs){ \
	ZZs=(rel)->sibl; if((rel)==(ZZt))ZZs=NULL;
