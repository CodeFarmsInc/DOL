  /* Control of this function:
   *  io==0 reads the whole object (pointers and zz_inp_..())
   *  io==1 prints the whole object;
   *  io==2 reads only the attributes (call to zz_inp_..()).
   *  io==3 debugging print
   */

#ifdef ZZ_ANSI
  void *ZZnewObj(ZZint size,ZZint ini);
#else
  void *ZZnewObj();
#endif
  static char remChar=' ';
  char **s;
  ZZint skipPtr,i,n;

  /* decide when to skip printing pointers */
  skipPtr=0;
  if(type>=0){
      if(ZZstrList[type].numPtr<=0 && ZZstrList[type].timeIndex<0)skipPtr=1;

  }

  /* note everywhere here, fgets cannot handle 0-length string */
  if(io==0 && !skipPtr){
      if(type==(-1) && strSz>0){
          for(n=0; n<strSz-1; n=n+i){
              if(!fgets(p+n,strSz-n+1,fp))return(1);
              p[strSz-1]='\0';
              i=strlen(p+n);
          }
      }
      else {
          if(!fgets(ZZbuff,ZZ_BUFS,fp))return(1);
      }
  }

  switch(type){
    case -8: /* block of general bytes */
      if(io==1)fprintf(fp,"%u\n",*p);
      else {
         sscanf(ZZbuff,"%u",&i);
         *p=i;
      }
      break;

    case -7: /* float or an array of these */
      if(io==1)fprintf(fp,"%f\n",*((ZZfloat *)p));
      else {
         sscanf(ZZbuff,"%f",(float *)p);
      }
      break;

    case -6: /* int or an array of these */
      if(io==1)fprintf(fp,"%d\n",*((int *)p));
      else {
         sscanf(ZZbuff,"%d",(int *)p);
      }
      break;

    case -5: /* char * or an array of these */
      s=(char**)p;
#ifdef LARGE_POINTER
#ifdef Windows64
      if(io==1)fprintf(fp,"%I64u\n",*s);
      else {
          sscanf(ZZbuff,"%I64u",s);
      }
#else
      if(io==1)fprintf(fp,"%lu\n",*s);
      else {
          sscanf(ZZbuff,"%lu",s);
      }
#endif
#else
      if(io==1)fprintf(fp,"%d\n",*s);
      else {
          sscanf(ZZbuff,"%d",s);
      }
#endif
      break;

    case -4: /* array header */
      if(ZZnTbType>=9){
          if(io==1){
#ifdef LARGE_POINTER
#ifdef Windows64
            fprintf(fp,"%I64d %I64d %I64d %I64d %I64d %I64d %I64u\n",
#else
            fprintf(fp,"%d %d %d %d %d %d %lu\n",
#endif
#else
            fprintf(fp,"%d %d %d %d %d %d %d\n",
#endif
              (((ZZarray *)p)->num),
              (((ZZarray *)p)->waterM),
              (((ZZarray *)p)->strType),
              (((ZZarray *)p)->size),
              (((ZZarray *)p)->incr),
              (((ZZarray *)p)->hshType),
              (((ZZarray *)p)->array));
          }
          else {
#ifdef LARGE_POINTER
#ifdef Windows64
            sscanf(ZZbuff,"%I64d %I64d %I64d %I64d %I64d %I64d %I64u",
#else
            sscanf(ZZbuff,"%d %d %d %d %d %d %lu",
#endif
#else
            sscanf(ZZbuff,"%d %d %d %d %d %d %d",
#endif
              &(((ZZarray *)p)->num),
              &(((ZZarray *)p)->waterM),
              &(((ZZarray *)p)->strType),
              &(((ZZarray *)p)->size),
              &(((ZZarray *)p)->incr),
              &(((ZZarray *)p)->hshType),
              &(((ZZarray *)p)->array));
          }
      }
      else {  /* previous versions did not have hshType */
          if(io==1){
#ifdef LARGE_POINTER
#ifdef Windows64
            fprintf(fp,"%d %d %d %d %d %I64u\n",
#else
            fprintf(fp,"%I64d %I64d %I64d %I64d %I64d %I64lu\n",
#endif
#else
            fprintf(fp,"%d %d %d %d %d %d\n",
#endif
              (((ZZarray *)p)->num),
              (((ZZarray *)p)->waterM),
              (((ZZarray *)p)->strType),
              (((ZZarray *)p)->size),
              (((ZZarray *)p)->incr),
              (((ZZarray *)p)->array));
          }
          else {
#ifdef LARGE_POINTER
#ifdef Windows64
            sscanf(ZZbuff,"%I64d %I64d %I64d %I64d %I64d %I64u",
#else
            sscanf(ZZbuff,"%d %d %d %d %d %lu",
#endif
#else
            sscanf(ZZbuff,"%d %d %d %d %d %d",
#endif
              &(((ZZarray *)p)->num),
              &(((ZZarray *)p)->waterM),
              &(((ZZarray *)p)->strType),
              &(((ZZarray *)p)->size),
              &(((ZZarray *)p)->incr),
              &(((ZZarray *)p)->array));
          }
      }
      break;

    case -3: /* property array */
      if(io==1){
#ifdef LARGE_POINTER
#ifdef Windows64
        fprintf(fp,"%I64d %I64u\n",
#else
        fprintf(fp,"%d %lu\n",
#endif
#else
        fprintf(fp,"%d %u\n",
#endif
          (((struct ZZaProp *)p)->size),
          (((struct ZZaProp *)p)->array));
      }
      else {
#ifdef LARGE_POINTER
#ifdef Windows64
        sscanf(ZZbuff,"%d %I64u",
#else
        sscanf(ZZbuff,"%d %lu",
#endif
#else
        sscanf(ZZbuff,"%d %d",
#endif
          &(((struct ZZaProp *)p)->size),
          &(((struct ZZaProp *)p)->array));
      }
      break;

    case -2: /* property header */
      if(remChar=='c'){
        if(io==1){
#ifdef LARGE_POINTER
#ifdef Windows64
          fprintf(fp,"%I64u %I64u %c\n",
#else
          fprintf(fp,"%lu %lu %c\n",
#endif
#else
          fprintf(fp,"%d %d %c\n",
#endif
            (((struct ZZproperty *)p)->codeName),
            (((struct ZZproperty *)p)->next),
            (((struct ZZproperty *)p)->propType.cProp[0]));
        }
        else {
#ifdef LARGE_POINTER
#ifdef Windows64
          sscanf(ZZbuff,"%I64u %I64u %c",
#else
          sscanf(ZZbuff,"%lu %lu %c",
#endif
#else
          sscanf(ZZbuff,"%d %d %c",
#endif
          &(((struct ZZproperty *)p)->codeName),
          &(((struct ZZproperty *)p)->next),
          &(((struct ZZproperty *)p)->propType.cProp[0]));
        }
      }
      else if(remChar=='f'){
        if(io==1){
#ifdef LARGE_POINTER
#ifdef Windows64
          fprintf(fp,"%I64u %I64u %f\n",
#else
          fprintf(fp,"%lu %lu %f\n",
#endif
#else
          fprintf(fp,"%d %d %f\n",
#endif
            (((struct ZZproperty *)p)->codeName),
            (((struct ZZproperty *)p)->next),
            (((struct ZZproperty *)p)->propType.fProp));
        }
        else {
#ifdef LARGE_POINTER
#ifdef Windows64
          sscanf(ZZbuff,"%I64u %I64u %f",
#else
          sscanf(ZZbuff,"%lu %lu %f",
#endif
#else
          sscanf(ZZbuff,"%d %d %f",
#endif
            &(((struct ZZproperty *)p)->codeName),
            &(((struct ZZproperty *)p)->next),
            &(((struct ZZproperty *)p)->propType.fProp));
        }
      }
      else if(remChar=='i'){
        if(io==1){
#ifdef LARGE_POINTER
#ifdef Windows64
          fprintf(fp,"%I64u %I64u %d\n",
#else
          fprintf(fp,"%lu %lu %d\n",
#endif
#else
          fprintf(fp,"%d %d %d\n",
#endif
            (((struct ZZproperty *)p)->codeName),
            (((struct ZZproperty *)p)->next),
            (((struct ZZproperty *)p)->propType.iProp));
        }
        else {
#ifdef LARGE_POINTER
#ifdef Windows64
          sscanf(ZZbuff,"%I64u %I64u %d",
#else
          sscanf(ZZbuff,"%lu %lu %d",
#endif
#else
          sscanf(ZZbuff,"%d %d %d",
#endif
            &(((struct ZZproperty *)p)->codeName),
            &(((struct ZZproperty *)p)->next),
            &(((struct ZZproperty *)p)->propType.iProp));
        }
      }
      else {
        if(io==1){
#ifdef LARGE_POINTER
#ifdef Windows64
          fprintf(fp,"%I64u %I64u %lu\n",
#else
          fprintf(fp,"%lu %lu %lu\n",
#endif
#else
          fprintf(fp,"%d %d %d\n",
#endif
            (((struct ZZproperty *)p)->codeName),
            (((struct ZZproperty *)p)->next),
            (((struct ZZproperty *)p)->propType.arrayProp));
        }
        else {
#ifdef LARGE_POINTER
#ifdef Windows64
          sscanf(ZZbuff,"%I64u %I64u %lu",
#else
          sscanf(ZZbuff,"%lu %lu %lu",
#endif
#else
          sscanf(ZZbuff,"%d %d %d",
#endif
            &(((struct ZZproperty *)p)->codeName),
            &(((struct ZZproperty *)p)->next),
            &(((struct ZZproperty *)p)->propType.arrayProp));
        }
      }
      break;

    case -1: /* text string - usually a name */
      if(io==1)fprintf(fp,"%s\n",p);
      else {
        p[strSz-1]='\0';
      }
      /* remember the first character, which is important for properties */
      remChar=p[0];
      break;
