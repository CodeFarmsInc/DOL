/* =========================================================
.(l
 TEXT strType; /* class to allocate */
 strType *ptr; /* returned pointer, NULL if allocation problems */
.)l
Description:
 Picks up a single object from the pool of free objects.
If the pool is empty, a new block is allocated. The returned object is
disconnected from all organizations (ZZ_INITIAL() does not have to be called).
Virtual function pointers are properly initialized for the given type.
.sp
IMPORTANT: The constructor of the class must call ZZ_INITIAL() as shown
in the example below.
.sp
This macro is specifically designed for C++; it cannot be used in C.
Its C equivalent is ZZ_OBJECT_ALLOC(). The allocation of new objects
is done through function ZZnewObj() in file orgC/lib/msgs.c; if you
replace the call to new() there by your own allocation function, the whole
of OrgC++ converts to your allocation scheme.
.sp
See also: ZZ_OBJECT_FREE() which moves an object into the pool, and
ZZ_OBJECT_CLEAR() which frees the whole pool.
.sp
Warning: This macro keeps one instance of the given object. Using it
inside an in-line function may cause some overehad.
.(l
Example: 

class Insect {
    ZZ_EXT_Insect
private:
    short numLegs;
    char color;
    char category;
public:
    Insect *newObj(void);
    void delObj(void);
    Insect(){ZZ_INITIAL(Insect,0,1,this);};
    ~Insect(){ZZ_CHECK_FREE(Insect,1,this);};
};
Insect* Insect::newObj(void){Insect *p; ZZ_OBJECT_NEW(Insect,p);return(p);};
void    Insect::delObj(void){ZZ_OBJECT_FREE(Insect,this);};

.)l
.sp 1
  ========================================================== */ 
#define ZZ_OBJECT_NEW(strType,ptr) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
{ static strType s; char *ZZFUN_allo(); void ZZFUN_bitCopy(); ZZint mode;\
    if(ZZmemSwitch==2)mode=2; else mode=0; \
    (ptr)= (strType *)ZZallo(ZZstrList,(char **)ZZselfArr,ZZFP(ZZJ,strType),\
       ZZ_STRINGIT(strType),ZZFP(ZZI,strType),0,(ZZint)sizeof(strType),mode);\
    if(ptr){ \
        ZZFN(ZZSS,strType); \
        if(ZZmemSwitch!=2){ \
	      ZZbitCopy((int)sizeof(strType),(char*)(&s),(char*)(ptr));\
        } \
    } \
}
