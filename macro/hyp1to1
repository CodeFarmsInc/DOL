/* =========================================================
.(l
 TEXT id;    // hyper-class id
 TEXT sType; // type of the source Entity
 TEXT rType; // type of the relation
 TEXT tType; // type of the target entity
.)l
Description:
 Declaration of the 1_TO_1 relation between two Entity types. Source and
target entities can have the same type.
.pp
This organization uses 4 pointers: 1 on each entity, and 2 on the relation.
.pp
 void add(sType*,rType*,tType*) adds a new relation between two entities;
 void del(rType*) disconnects the given relation;
 sType *source(rType*) returns the source for the given relation;
 tType *source(rType*) returns the target for the given relation;
 rType *fwd(sType*) returns the last loaded relation for the given source;
 rType *bwd(tType*) returns the relation for the given target;
 There is no iterator for this organization. It is essentially a two-stage
DOUBLE_LINK.
.pp
 For local scope use ZZ_LOCAL_1_TO_1(). See description
of ZZ_LOCAL_SINGLE_RING() on how to work in local scope.
.(l
Example:
   class Professor {
       ZZ_EXT_Professor
   public:
       char *name;
       Professor(){ZZ_INITIAL(Professor,0,1,this);}
       ~Professor(){ZZ_CHECK_FREE(Professor,1,this);}
   };
   class Room {
       ZZ_EXT_Room
   public:
       int roomNum;
       Room(){ZZ_INITIAL(Room,0,1,this);}
       ~Room(){ZZ_CHECK_FREE(Room,1,this);}
   };
   class Assigned {
       ZZ_EXT_Assigned
   public:
       int date;
       Assigned(){ZZ_INITIAL(Assigned,0,1,this);}
       ~Assigned(){ZZ_CHECK_FREE(Assigned,1,this);}
   };
   ZZ_HYPER_1_TO_1(location,Professor,Assigned,Room);

   Professor *p;
   Room *r;
   Assigned *a;

   // print when a professor was assinged a room, and which one
   a=location.fwd(p);
   r=location.target(a);
   cout << "date=" << a->date << "room=" << r->roomNum << "\n";
   // print when a room was assinged and to which professor
   a=location.bwd(r);
   p=location.source(a);
   cout << "date=" << a->date << "professor=" << p->name << "\n";
.)l
  ========================================================== */ 
#define ZZ_HYPER_1_TO_1(id,sType,rType,tType) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */ \
ZZ_BASIC_1_TO_1(id,sType,rType,tType,ZZ_EXTERN,id)

#define ZZ_LOCAL_1_TO_1(id,sType,rType,tType,where) \
ZZ_BASIC_1_TO_1(id,sType,rType,tType,static,where :: id)

#define ZZ_BASIC_1_TO_1(id,sType,rType,tType,scope,where) \
class ZZFP(ZZH,id) { \
  friend class sType;\
  friend class rType;\
  friend class tType;\
public: \
  void add(sType *s,rType *r,tType *t);\
  void del(rType *r);\
  sType *source(rType *r){sType *s; ZZ_SOURCE_1_TO_1(id,r,s); return(s);}\
  tType *target(rType *r){tType *t; ZZ_TARGET_1_TO_1(id,r,t); return(t);}\
  rType *fwd(sType *s){rType *r; ZZ_FORWARD_1_TO_1(id,s,r); return(r);}\
  rType *bwd(tType *t){rType *r; ZZ_BACKWARD_1_TO_1(id,t,r); return(r);}\
};\
scope ZZFP(ZZH,id) id
/* _______________________________________________________________________ */
void ZZV$ ZZH$ :: add(ZZ1$ *s,ZZ2$ *r,ZZ3$ *t){ZZ_ADD_RELATION_1_TO_1($,s,r,t);}
void ZZV$ ZZH$ :: del(ZZ2$ *r){ZZ_DELETE_RELATION_1_TO_1($,r);}
