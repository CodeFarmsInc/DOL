/* =========================================================
.(l
 TEXT id;           /* id for the instance of the organization */
 str1Type *par;     /* parent of this collection */
 str2Type *child;   /* child to be deleted from the collection */
.)l
Description:
 Disconnect the given child object from the collection.
 This macro can be called within a 'traverse' or 'retrace' loop, see the example.
.(l
Example:
From the given salary group which is implemented as
a collection, delete all employees that have salary lower than $20,000.

typedef struct Employee Employee;
typedef struct SalaryGroup SalaryGroup;
struct Employee {
    ZZ_EXT_Employee
    char *name;
    int salary;
    int startDate;
};
struct SalaryGroup{
    ZZ_EXT_SalaryGroup
    int low,high;   
};
ZZ_ORG_DOUBLE_COLLECT(empl,SalaryGroup,Employee);

Employee *pp;
SalaryGroup *group;

ZZ_A_TRAVERSE(empl,group,pp){
    if(pp->salary<20000) {
        ZZ_DELETE(empl,group,pp);
    }
}ZZ_A_END
.)l
.sp 1
  ========================================================== */ 
#define ZZ_DELETE_DOUBLE_COLLECT(id,par,child) \
/* +++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */\
ZZZ_DELETE_DOUBLE_COLLECT\
(id,ZZFT(2,id),ZZFP(ZZf,id),ZZFP(ZZb,id),ZZFP(ZZc,id),par,child)

#define ZZZ_DELETE_DOUBLE_COLLECT(id,sBot,fwp,bwp,child,entry,pp) \
{sBot *ZZa,*ZZb; \
    if(pp) {\
        if((pp)->fwp==(pp))(entry)->child=NULL;\
        else { \
            ZZa=(pp)->bwp; ZZb=(pp)->fwp;\
            if((entry)->child==(pp))(entry)->child=ZZa;\
            ZZa->fwp=ZZb; ZZb->bwp=ZZa;\
        } \
        (pp)->fwp=(pp)->bwp=NULL;\
    }\
}
